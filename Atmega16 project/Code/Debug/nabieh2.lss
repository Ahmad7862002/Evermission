
nabieh2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000954  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000061a  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 14 02 	call	0x428	; 0x428 <main>
  64:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SW_init>:
#include "external_interrupts.h"
#else
#include "gpio.h"
#endif

void SW_init(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
#if SW_WITH_EXTERNAL_INTERRUPTS
	EXTERNAL_INTERRUPTS_init(SW_INT_PIN_CONNECTED, SW_LOGIC);
#else
	GPIO_setupPinDirection(SW_PORT_CONNECTED, SW_PIN_CONNECTED, INPUT);
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	63 e0       	ldi	r22, 0x03	; 3
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	0e 94 56 00 	call	0xac	; 0xac <GPIO_setupPinDirection>
#endif
#if SW_ENABLE_PULLUP
	GPIO_writePin(SW_PORT_CONNECTED, SW_PIN_CONNECTED, LOGIC_HIGH);
#endif
}
  7e:	cf 91       	pop	r28
  80:	df 91       	pop	r29
  82:	08 95       	ret

00000084 <SW_isButtonPressed>:
	EXTERNAL_INTERRUPTS_setCallBack(ptr2Func, SW_INT_PIN_CONNECTED);
}
#endif

#if !SW_WITH_EXTERNAL_INTERRUPTS
uint8 SW_isButtonPressed(void){
  84:	df 93       	push	r29
  86:	cf 93       	push	r28
  88:	0f 92       	push	r0
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
#if SW_POSITIVE_LOGIC
	if(GPIO_readPin(SW_PORT_CONNECTED, SW_PIN_CONNECTED)){
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	63 e0       	ldi	r22, 0x03	; 3
  92:	0e 94 32 01 	call	0x264	; 0x264 <GPIO_readPin>
  96:	88 23       	and	r24, r24
  98:	19 f0       	breq	.+6      	; 0xa0 <SW_isButtonPressed+0x1c>
		return TRUE;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <SW_isButtonPressed+0x1e>
	}
	else{
		return FALSE;
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	89 81       	ldd	r24, Y+1	; 0x01
	}
	else{
		return FALSE;
	}
#endif
}
  a4:	0f 90       	pop	r0
  a6:	cf 91       	pop	r28
  a8:	df 91       	pop	r29
  aa:	08 95       	ret

000000ac <GPIO_setupPinDirection>:
		 -a_pinNUm: Number from 0 -> 7 corresponding to the PIN ID
		 -a_direction: 0 corresponds to INPUT, any other positive number corresponds
		 	 	 	   to OUPUT
• Return: None
 *******************************************************************************/
void GPIO_setupPinDirection(uint8 a_portNum, uint8 a_pinNum, GPIO_Direction a_direction){
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	00 d0       	rcall	.+0      	; 0xb2 <GPIO_setupPinDirection+0x6>
  b2:	0f 92       	push	r0
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	6a 83       	std	Y+2, r22	; 0x02
  bc:	4b 83       	std	Y+3, r20	; 0x03
	if((a_pinNum >= NUM_OF_PINS_PER_PORT) || (a_portNum >= NUM_OF_PORTS)){
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	88 30       	cpi	r24, 0x08	; 8
  c2:	08 f0       	brcs	.+2      	; 0xc6 <GPIO_setupPinDirection+0x1a>
  c4:	5b c0       	rjmp	.+182    	; 0x17c <GPIO_setupPinDirection+0xd0>
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	84 30       	cpi	r24, 0x04	; 4
  ca:	08 f0       	brcs	.+2      	; 0xce <GPIO_setupPinDirection+0x22>
  cc:	57 c0       	rjmp	.+174    	; 0x17c <GPIO_setupPinDirection+0xd0>
		/* Do Nothing */
	}
	else{
		/* Setup the pin direction as required */
		if(a_direction){
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	88 23       	and	r24, r24
  d2:	51 f1       	breq	.+84     	; 0x128 <GPIO_setupPinDirection+0x7c>
			SET_BIT(DDRX(a_portNum), a_pinNum);
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	28 2f       	mov	r18, r24
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	c9 01       	movw	r24, r18
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	82 0f       	add	r24, r18
  e2:	93 1f       	adc	r25, r19
  e4:	90 95       	com	r25
  e6:	81 95       	neg	r24
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	ca 96       	adiw	r24, 0x3a	; 58
  ec:	dc 01       	movw	r26, r24
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	c9 01       	movw	r24, r18
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	82 0f       	add	r24, r18
  fc:	93 1f       	adc	r25, r19
  fe:	90 95       	com	r25
 100:	81 95       	neg	r24
 102:	9f 4f       	sbci	r25, 0xFF	; 255
 104:	ca 96       	adiw	r24, 0x3a	; 58
 106:	fc 01       	movw	r30, r24
 108:	80 81       	ld	r24, Z
 10a:	48 2f       	mov	r20, r24
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <GPIO_setupPinDirection+0x72>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <GPIO_setupPinDirection+0x6e>
 122:	84 2b       	or	r24, r20
 124:	8c 93       	st	X, r24
 126:	2a c0       	rjmp	.+84     	; 0x17c <GPIO_setupPinDirection+0xd0>
		}
		else{
			CLEAR_BIT(DDRX(a_portNum), a_pinNum);
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	c9 01       	movw	r24, r18
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	82 0f       	add	r24, r18
 136:	93 1f       	adc	r25, r19
 138:	90 95       	com	r25
 13a:	81 95       	neg	r24
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	ca 96       	adiw	r24, 0x3a	; 58
 140:	dc 01       	movw	r26, r24
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	28 2f       	mov	r18, r24
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	c9 01       	movw	r24, r18
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	82 0f       	add	r24, r18
 150:	93 1f       	adc	r25, r19
 152:	90 95       	com	r25
 154:	81 95       	neg	r24
 156:	9f 4f       	sbci	r25, 0xFF	; 255
 158:	ca 96       	adiw	r24, 0x3a	; 58
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 2e       	mov	r0, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <GPIO_setupPinDirection+0xc6>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <GPIO_setupPinDirection+0xc2>
 176:	80 95       	com	r24
 178:	84 23       	and	r24, r20
 17a:	8c 93       	st	X, r24
		}
	}
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <GPIO_writePin>:
		 -a_value: 0 corresponds to LOGIC_LOW, any other positive number is equivalent
		 	 	 	   to LOGIC_HIGH
• Return: None
 *******************************************************************************/
void GPIO_writePin(uint8 a_portNum, uint8 a_pinNum, GPIO_LogicValue a_value)
{
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	00 d0       	rcall	.+0      	; 0x18e <GPIO_writePin+0x6>
 18e:	0f 92       	push	r0
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	6a 83       	std	Y+2, r22	; 0x02
 198:	4b 83       	std	Y+3, r20	; 0x03
	if(a_portNum >= NUM_OF_PORTS || a_portNum >= NUM_OF_PINS_PER_PORT){
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <GPIO_writePin+0x1a>
 1a0:	5b c0       	rjmp	.+182    	; 0x258 <GPIO_writePin+0xd0>
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	88 30       	cpi	r24, 0x08	; 8
 1a6:	08 f0       	brcs	.+2      	; 0x1aa <GPIO_writePin+0x22>
 1a8:	57 c0       	rjmp	.+174    	; 0x258 <GPIO_writePin+0xd0>
		/*Do nothing*/
	}
	else{
		if(a_value){
 1aa:	8b 81       	ldd	r24, Y+3	; 0x03
 1ac:	88 23       	and	r24, r24
 1ae:	51 f1       	breq	.+84     	; 0x204 <GPIO_writePin+0x7c>
			SET_BIT(PORTX(a_portNum), a_pinNum);
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	c9 01       	movw	r24, r18
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	82 0f       	add	r24, r18
 1be:	93 1f       	adc	r25, r19
 1c0:	90 95       	com	r25
 1c2:	81 95       	neg	r24
 1c4:	9f 4f       	sbci	r25, 0xFF	; 255
 1c6:	cb 96       	adiw	r24, 0x3b	; 59
 1c8:	dc 01       	movw	r26, r24
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	c9 01       	movw	r24, r18
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	82 0f       	add	r24, r18
 1d8:	93 1f       	adc	r25, r19
 1da:	90 95       	com	r25
 1dc:	81 95       	neg	r24
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	cb 96       	adiw	r24, 0x3b	; 59
 1e2:	fc 01       	movw	r30, r24
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <GPIO_writePin+0x72>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <GPIO_writePin+0x6e>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	2a c0       	rjmp	.+84     	; 0x258 <GPIO_writePin+0xd0>
		}
		else{
			CLEAR_BIT(PORTX(a_portNum), a_pinNum);
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	c9 01       	movw	r24, r18
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	82 0f       	add	r24, r18
 212:	93 1f       	adc	r25, r19
 214:	90 95       	com	r25
 216:	81 95       	neg	r24
 218:	9f 4f       	sbci	r25, 0xFF	; 255
 21a:	cb 96       	adiw	r24, 0x3b	; 59
 21c:	dc 01       	movw	r26, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	c9 01       	movw	r24, r18
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	82 0f       	add	r24, r18
 22c:	93 1f       	adc	r25, r19
 22e:	90 95       	com	r25
 230:	81 95       	neg	r24
 232:	9f 4f       	sbci	r25, 0xFF	; 255
 234:	cb 96       	adiw	r24, 0x3b	; 59
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 2e       	mov	r0, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <GPIO_writePin+0xc6>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	0a 94       	dec	r0
 250:	e2 f7       	brpl	.-8      	; 0x24a <GPIO_writePin+0xc2>
 252:	80 95       	com	r24
 254:	84 23       	and	r24, r20
 256:	8c 93       	st	X, r24
		}
	}
}
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	cf 91       	pop	r28
 260:	df 91       	pop	r29
 262:	08 95       	ret

00000264 <GPIO_readPin>:
		 	 	 	  1, otherwise the function returns 0 in all other cases. Note
		 	 	 	  that the function will return 0 if the port num or the pin number
		 	 	 	  is not entered correctly
 *******************************************************************************/
uint8 GPIO_readPin(uint8 a_portNum, uint8 a_pinNum)
{
 264:	df 93       	push	r29
 266:	cf 93       	push	r28
 268:	00 d0       	rcall	.+0      	; 0x26a <GPIO_readPin+0x6>
 26a:	0f 92       	push	r0
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	8a 83       	std	Y+2, r24	; 0x02
 272:	6b 83       	std	Y+3, r22	; 0x03
	uint8 funcOutput = LOGIC_LOW;
 274:	19 82       	std	Y+1, r1	; 0x01
	if(a_portNum >= NUM_OF_PORTS || a_pinNum >= NUM_OF_PINS_PER_PORT){
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	84 30       	cpi	r24, 0x04	; 4
 27a:	58 f5       	brcc	.+86     	; 0x2d2 <GPIO_readPin+0x6e>
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	88 30       	cpi	r24, 0x08	; 8
 280:	40 f5       	brcc	.+80     	; 0x2d2 <GPIO_readPin+0x6e>
		/* Do nothing */
	}
	else{
		funcOutput = GET_BIT(PINX(a_portNum), a_pinNum);
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	28 2f       	mov	r18, r24
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	c9 01       	movw	r24, r18
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	82 0f       	add	r24, r18
 290:	93 1f       	adc	r25, r19
 292:	90 95       	com	r25
 294:	81 95       	neg	r24
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	c9 96       	adiw	r24, 0x39	; 57
 29a:	fc 01       	movw	r30, r24
 29c:	80 81       	ld	r24, Z
 29e:	48 2f       	mov	r20, r24
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GPIO_readPin+0x4e>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	2a 95       	dec	r18
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GPIO_readPin+0x4a>
 2b6:	9a 01       	movw	r18, r20
 2b8:	28 23       	and	r18, r24
 2ba:	39 23       	and	r19, r25
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	88 2f       	mov	r24, r24
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	a9 01       	movw	r20, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <GPIO_readPin+0x66>
 2c6:	55 95       	asr	r21
 2c8:	47 95       	ror	r20
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <GPIO_readPin+0x62>
 2ce:	ca 01       	movw	r24, r20
 2d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return funcOutput;
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	cf 91       	pop	r28
 2dc:	df 91       	pop	r29
 2de:	08 95       	ret

000002e0 <GPIO_setupPortDirection>:
		 -a_direction: 0 corresponds to INPNUT and any other positive number is
		 	 	 	   equivalent to OUTPUT
• Return: None
 *******************************************************************************/
void GPIO_setupPortDirection(uint8 a_portNum, GPIO_Direction a_direction)
{
 2e0:	df 93       	push	r29
 2e2:	cf 93       	push	r28
 2e4:	00 d0       	rcall	.+0      	; 0x2e6 <GPIO_setupPortDirection+0x6>
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	6a 83       	std	Y+2, r22	; 0x02
	if(a_portNum >= NUM_OF_PORTS)
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	84 30       	cpi	r24, 0x04	; 4
 2f2:	78 f4       	brcc	.+30     	; 0x312 <GPIO_setupPortDirection+0x32>
	{
		/* Do Nothing */
	}
	else
	{
		DDRX(a_portNum) = a_direction;
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	c9 01       	movw	r24, r18
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	82 0f       	add	r24, r18
 302:	93 1f       	adc	r25, r19
 304:	90 95       	com	r25
 306:	81 95       	neg	r24
 308:	9f 4f       	sbci	r25, 0xFF	; 255
 30a:	ca 96       	adiw	r24, 0x3a	; 58
 30c:	fc 01       	movw	r30, r24
 30e:	8a 81       	ldd	r24, Y+2	; 0x02
 310:	80 83       	st	Z, r24
	}
}
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	cf 91       	pop	r28
 318:	df 91       	pop	r29
 31a:	08 95       	ret

0000031c <GPIO_writePort>:
		 -a_value: 0 corresponds to LOGIC_LOW and any other positive number is
		 	 	 	   equivalent to LOGIC_HIGH
• Return: None
 *******************************************************************************/
void GPIO_writePort(uint8 a_portNum, GPIO_LogicValue a_value)
{
 31c:	df 93       	push	r29
 31e:	cf 93       	push	r28
 320:	00 d0       	rcall	.+0      	; 0x322 <GPIO_writePort+0x6>
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	89 83       	std	Y+1, r24	; 0x01
 328:	6a 83       	std	Y+2, r22	; 0x02
	if(a_portNum >= NUM_OF_PORTS){
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	78 f4       	brcc	.+30     	; 0x34e <GPIO_writePort+0x32>
		/*Do nothing*/
	}
	else{
		PORTX(a_portNum) = a_value;
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	c9 01       	movw	r24, r18
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	82 0f       	add	r24, r18
 33e:	93 1f       	adc	r25, r19
 340:	90 95       	com	r25
 342:	81 95       	neg	r24
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	cb 96       	adiw	r24, 0x3b	; 59
 348:	fc 01       	movw	r30, r24
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	80 83       	st	Z, r24
	}
}
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	cf 91       	pop	r28
 354:	df 91       	pop	r29
 356:	08 95       	ret

00000358 <GPIO_readPort>:
		 -funcOutput: The functions return what is read from the pin register
		 	 	 	  of the given port. If the port number is invalid the
		 	 	 	  functions return 0 (LOGIC_LOW);
 *******************************************************************************/
uint8 GPIO_readPort(uint8 a_portNum)
{
 358:	df 93       	push	r29
 35a:	cf 93       	push	r28
 35c:	00 d0       	rcall	.+0      	; 0x35e <GPIO_readPort+0x6>
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	8a 83       	std	Y+2, r24	; 0x02
	uint8 funcOutput = LOGIC_LOW;
 364:	19 82       	std	Y+1, r1	; 0x01
	if(a_portNum >= NUM_OF_PORTS){
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	84 30       	cpi	r24, 0x04	; 4
 36a:	78 f4       	brcc	.+30     	; 0x38a <GPIO_readPort+0x32>
		/* Do nothing */
	}
	else{
		funcOutput = PINX(a_portNum);
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	c9 01       	movw	r24, r18
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	82 0f       	add	r24, r18
 37a:	93 1f       	adc	r25, r19
 37c:	90 95       	com	r25
 37e:	81 95       	neg	r24
 380:	9f 4f       	sbci	r25, 0xFF	; 255
 382:	c9 96       	adiw	r24, 0x39	; 57
 384:	fc 01       	movw	r30, r24
 386:	80 81       	ld	r24, Z
 388:	89 83       	std	Y+1, r24	; 0x01
	}
	return funcOutput;
 38a:	89 81       	ldd	r24, Y+1	; 0x01
}
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	08 95       	ret

00000396 <LED_init>:
 */

#include "led.h"
#include "gpio.h"

void LED_init(void){
 396:	df 93       	push	r29
 398:	cf 93       	push	r28
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
#if LED_NUMBER_OF_LEDS >= 1
	GPIO_setupPinDirection(LED0_PORT_CONNECTED, LED0_PIN_CONNECTED, OUTPUT);
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	65 e0       	ldi	r22, 0x05	; 5
 3a2:	4f ef       	ldi	r20, 0xFF	; 255
 3a4:	0e 94 56 00 	call	0xac	; 0xac <GPIO_setupPinDirection>
#endif
#if LED_NUMBER_OF_LEDS >= 2
	GPIO_setupPinDirection(LED1_PORT_CONNECTED, LED1_PIN_CONNECTED, OUTPUT);
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	66 e0       	ldi	r22, 0x06	; 6
 3ac:	4f ef       	ldi	r20, 0xFF	; 255
 3ae:	0e 94 56 00 	call	0xac	; 0xac <GPIO_setupPinDirection>
#endif
#if LED_NUMBER_OF_LEDS >= 3
	GPIO_setupPinDirection(LED2_PORT_CONNECTED, LED2_PIN_CONNECTED, OUTPUT);
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	67 e0       	ldi	r22, 0x07	; 7
 3b6:	4f ef       	ldi	r20, 0xFF	; 255
 3b8:	0e 94 56 00 	call	0xac	; 0xac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED3_PORT_CONNECTED, LED3_PIN_CONNECTED, OUTPUT);
#endif
#if LED_NUMBER_OF_LEDS == 5
	GPIO_setupPinDirection(LED4_PORT_CONNECTED, LED4_PIN_CONNECTED, OUTPUT);
#endif
}
 3bc:	cf 91       	pop	r28
 3be:	df 91       	pop	r29
 3c0:	08 95       	ret

000003c2 <LED_sendState>:

void LED_sendState(uint8 LED_id, LED_states state){
 3c2:	df 93       	push	r29
 3c4:	cf 93       	push	r28
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <LED_sendState+0x6>
 3c8:	00 d0       	rcall	.+0      	; 0x3ca <LED_sendState+0x8>
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	6a 83       	std	Y+2, r22	; 0x02
	switch(LED_id){
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	28 2f       	mov	r18, r24
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	3c 83       	std	Y+4, r19	; 0x04
 3da:	2b 83       	std	Y+3, r18	; 0x03
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
 3de:	9c 81       	ldd	r25, Y+4	; 0x04
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	91 05       	cpc	r25, r1
 3e4:	79 f0       	breq	.+30     	; 0x404 <LED_sendState+0x42>
 3e6:	2b 81       	ldd	r18, Y+3	; 0x03
 3e8:	3c 81       	ldd	r19, Y+4	; 0x04
 3ea:	22 30       	cpi	r18, 0x02	; 2
 3ec:	31 05       	cpc	r19, r1
 3ee:	81 f0       	breq	.+32     	; 0x410 <LED_sendState+0x4e>
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	9c 81       	ldd	r25, Y+4	; 0x04
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	89 f4       	brne	.+34     	; 0x41a <LED_sendState+0x58>
#if LED_NUMBER_OF_LEDS >= 1
	case LED0_ID:
		GPIO_writePin(LED0_PORT_CONNECTED, LED0_PIN_CONNECTED, state);
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	65 e0       	ldi	r22, 0x05	; 5
 3fc:	4a 81       	ldd	r20, Y+2	; 0x02
 3fe:	0e 94 c4 00 	call	0x188	; 0x188 <GPIO_writePin>
 402:	0b c0       	rjmp	.+22     	; 0x41a <LED_sendState+0x58>
		break;
#endif
#if LED_NUMBER_OF_LEDS >= 2
	case LED1_ID:
		GPIO_writePin(LED1_PORT_CONNECTED, LED1_PIN_CONNECTED, state);
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	66 e0       	ldi	r22, 0x06	; 6
 408:	4a 81       	ldd	r20, Y+2	; 0x02
 40a:	0e 94 c4 00 	call	0x188	; 0x188 <GPIO_writePin>
 40e:	05 c0       	rjmp	.+10     	; 0x41a <LED_sendState+0x58>
		break;
#endif
#if LED_NUMBER_OF_LEDS >= 3
	case LED2_ID:
		GPIO_writePin(LED2_PORT_CONNECTED, LED2_PIN_CONNECTED, state);
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	67 e0       	ldi	r22, 0x07	; 7
 414:	4a 81       	ldd	r20, Y+2	; 0x02
 416:	0e 94 c4 00 	call	0x188	; 0x188 <GPIO_writePin>
	case LED4_ID:
		GPIO_writePin(LED4_PORT_CONNECTED, LED4_PIN_CONNECTED, state);
		break;
#endif
	}
}
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	cf 91       	pop	r28
 424:	df 91       	pop	r29
 426:	08 95       	ret

00000428 <main>:
 */

#include "led.h"
#include "SW.h"

int main(void){
 428:	df 93       	push	r29
 42a:	cf 93       	push	r28
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
	LED_init();
 430:	0e 94 cb 01 	call	0x396	; 0x396 <LED_init>
	SW_init();
 434:	0e 94 36 00 	call	0x6c	; 0x6c <SW_init>
	while(1){
		if(SW_isButtonPressed()){
 438:	0e 94 42 00 	call	0x84	; 0x84 <SW_isButtonPressed>
 43c:	88 23       	and	r24, r24
 43e:	69 f0       	breq	.+26     	; 0x45a <main+0x32>
			LED_sendState(LED0_ID, LED_ON);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_sendState>
			LED_sendState(LED1_ID, LED_ON);
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_sendState>
			LED_sendState(LED2_ID, LED_ON);
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_sendState>
 458:	ef cf       	rjmp	.-34     	; 0x438 <main+0x10>
		}
		else{
			LED_sendState(LED0_ID, LED_OFF);
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_sendState>
			LED_sendState(LED1_ID, LED_OFF);
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_sendState>
			LED_sendState(LED2_ID, LED_OFF);
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_sendState>
 472:	e2 cf       	rjmp	.-60     	; 0x438 <main+0x10>

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
